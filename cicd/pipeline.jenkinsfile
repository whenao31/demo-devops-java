pipeline {
    agent none

    stages {
        stage('Build') {
            agent {
                docker {
                    image 'openjdk:17-jdk-slim'
                    args  '--entrypoint="" -u root --network host'
                }
            }
            steps {
                sh './mvnw -V clean install -DskipTests -DskipITs -DskipDocs'
            }
        }

        stage('Unit Testing') {
            agent {
                docker {
                    image 'openjdk:17-jdk-slim'
                    args  '--entrypoint="" -u root --network host'
                }
            }
            
            environment {
                NAME_DB = credentials('NAME_DB')
            }

            steps {
                sh './mvnw test'
                sh 'ls -lh target/surefire-reports/'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('Sonar Analysis') {
            environment {
                SONAR_TOKEN = credentials('SONAR_TOKEN')
                NAME_DB = credentials('NAME_DB')
            }
            agent {
                docker { 
                    image 'openjdk:17-jdk-slim'
                    args  '--entrypoint="" -u root --network host'
                }
            }
            steps {                
                withSonarQubeEnv('sonarqube') {
                    sh './mvnw clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=devsu-devops_test'
                }
            }
        }

        stage("Quality Gate") {
            agent any
            steps {
                script {
                    def qualitygate = waitForQualityGate()
                    if (qualitygate.status != "OK") {
                        input message: "Do you want to go on with the pipeline despite the low coverage?"
                        //error "Pipeline aborted due to quality gate coverage failure: ${qualitygate.status}"
                    }else{
                        sh 'echo "Quality gate OK"'
                    }
                }
            }
        }

        stage('Docker Image build and push') {
            agent any
            environment {
                DH_TOKEN = credentials('DOCKERHUB_TOKEN')
            }
            steps {
                sh 'docker build -t whenao31/demo-devops-java:${GIT_COMMIT} .'
                sh 'echo $DH_TOKEN_PSW | docker login -u $DH_TOKEN_USR --password-stdin'
                sh 'docker push whenao31/demo-devops-java:${GIT_COMMIT}'
            }
        }
    }
    
}